<div class="profile_controls">
    <div class="col-md-2 col-md-offset-1">
        <ul class="nav nav-pills" data-bind="foreach: $__page__.children">
            <li data-bind="css: {active: isVisible}"><a data-bind="text: $data.val('title'), page-href: $data"></a></li>
        </ul>
    </div>

    <div data-bind="page: {id: 'start', title: 'Plans', with: user}">
        <%= render 'plan' %>
    </div>

    <!-- ko if: plan_picked -->
        <!-- ko if: card_list -->
            <div data-bind="page: {id: 'cards', title: 'Cards', with: user}">
                <%= render 'cards' %>
            </div>
        <!-- /ko -->

        <div data-bind="page: {id: 'add_card', title: 'Add Card', with: user, afterShow: user().startCheckingCard}">
            <%= render 'add_card' %>
        </div>    
    <!-- /ko -->

    <%= javascript_include_tag "https://js.stripe.com/v1/" %>
    <%= csrf_meta_tags %>
    <%= tag :meta, :name => "stripe-key", :content => STRIPE_PUBLIC_KEY %>

    <script type="text/javascript">//<![CDATA[ 

            Stripe.setPublishableKey('<%= STRIPE_PUBLIC_KEY %>');

            var user_data = <%= raw(current_user.as_json.to_json) %>;
            var plan_data = <%= raw(@plans.as_json.to_json) %>;
            var default_card = "<%= raw(@default_card) %>";

            function Card(data,user){
                
                var self = this;
                self.user = user;
                self.last4 = data.last4;
                self.type = data.type;
                self.id = data.id;

            }

            function Plan(data,user){
                
                var self = this;
                self.id = data.id;
                self.name = data.name;
                self.price = data.price;
                self.interval = data.interval;
                self.message = data.message;

            }            

            function User(data,model) {
                var self = this;
                self.id = data._id;
                self.model = model;
                self.email = ko.observable(data.email);
                self.phone = ko.observable(data.phone);
                self.stripe_token = ko.observable(data.stripe_token ? data.stripe_token : null);
                self.cards = ko.observableArray([]);
                self.coupon = ko.observable("");
                self.errorMessage = ko.observable();
                self.disableButton = ko.observable(false);
                self.validCard = ko.observable(false);
                self.plan = ko.observable();
                self.original_plan = data.plan ? data.plan : null;

                _.each(data.cards,function(card){ self.cards.push(new Card(card,self)) });

                if(data.plan){
                    self.plan(_.find(model.plans(),function(plan){ return plan.id == data.plan.id }));
                }                

                self.tutorialMode = ko.computed(function(){
                    if(self.stripe_token()){
                        return false;
                    } else {
                        return true;
                    }
                });

                self.updatePlanButton = ko.computed(function(){
                    if(!self.original_plan && self.plan()){
                        return false;
                    }
                    if(self.plan() && self.original_plan && self.plan().id != self.original_plan.id){
                        return false;
                    } else {
                        return true;
                    }
                });

                self.updatePlanButtonText = ko.computed(function(){
                    if(self.original_plan){
                        return "Update Plan";
                    } else {
                        return "Subscribe to Plan";
                    }
                });


                self.subscribeToPlan = function(){
                    bootbox.dialog({
                      message: "Would you like to immediately subscribe to the plan you selected called " + self.plan().name + "?",
                      title: "Subscribe",
                      buttons: {
                        success: {
                          label: "Cancel",
                          className: "btn-default pull-left col-xs-3",
                          callback: function() {
                            return;
                          }
                        },
                        danger: {
                          label: "Subscribe",
                          className: "btn-info col-xs-3 pull-right",
                          callback: function() {
                            $.ajax({
                              type: "POST",
                              url: "/app/profile/subscribe",
                              data: { 
                                data:ko.toJSON(self.plan()),
                                coupon: self.coupon(),
                              },
                              success: function(data, textStatus, jqXHR){
                                    if(data.success == "bad_coupon"){
                                        alert("Invalid Coupon.");
                                        return;
                                    }                                
                                    alert("Subscribed!");
                                },
                                error: function(data, XMLHttpRequest, textStatus, errorThrown) { 
                                    alert(errorThrown);
                                },
                                dataType: "json"
                            }); 
                          }
                        },
                      }
                    });                      
                }

                var stripeResponseHandler = function(status, response) {
                  var $form = $('#addCardForm');

                  if (response.error) {
                    self.disableButton(false);
                    self.errorMessage(response.error.message);
                  } else {
                    $.ajax({
                      type: "POST",
                      url: "/app/profile/add_card",
                      data: {
                        data:JSON.stringify(response),
                      },
                      success: function(data, textStatus, jqXHR){
                            self.disableButton(false);
                            if(data.success){
                                self.cards.push(new Card(response.card, self));
                                self.subscribeToPlan();
                            } else {
                                self.errorMessage("Something went wrong. We're looking into it.");
                            }
                        },
                        error: function(XMLHttpRequest, textStatus, errorThrown) { 
                            self.disableButton(false);
                            console.log("There was an error saving the section " + errorThrown);
                        },
                        dataType: "json"
                    });                      
                  }
                }; 

                self.addCard = function() {
                    var $form = $('#addCardForm');
                    self.disableButton(true);
                    self.errorMessage("");
                    Stripe.card.createToken($form, stripeResponseHandler);
                };

                self.startCheckingCard = function(){ 
                    console.log("Started!");
                    $("#card_numba").validateCreditCard(function(result){
                        if(result.card_type){
                            console.log(result.card_type.name);
                        }
                        if(result.length_valid && result.luhn_valid){
                            self.validCard(true);
                            console.log("card is valid");
                        } else {
                            self.validCard(false);
                        }
                    });
                };       

                self.save = function(){
                    $.ajax({
                      type: "POST",
                      url: "/app/administration/update_current_user",
                      data: {
                        params:ko.toJSON(self),
                      },
                      success: function(data, textStatus, jqXHR){
                            console.log("Saved!")      
                        },
                        error: function(XMLHttpRequest, textStatus, errorThrown) { 
                            console.log("There was an error saving the section " + errorThrown);
                        },
                        dataType: "json"
                    });                
                }                                

            }           

            function viewModel() {
                var self = this;
                self.plans = ko.observableArray([]);
                _.each(plan_data,function(plan){ self.plans.push(new Plan(plan)) });
                self.user = ko.observable(new User(user_data,self));

                self.card_list = ko.computed(function(){ return self.user().cards().length > 0});
                self.plan_picked = ko.computed(function(){ return self.user().plan()});
            };

            var viewmodel = new viewModel();            

            $(function(){   
                pager.Href.hash = '#!/';
                pager.extendWithPage(viewmodel);
                ko.applyBindings(viewmodel);                    
                pager.start();                   
            });

        //]]>  

    </script>

</div>


