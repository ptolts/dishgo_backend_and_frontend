<div class="container">

  <style type="text/css">
    body {
      background-color: white;
      background-image: none;
    }
  </style>

    <div class="col-md-6 col-xs-12">
        <div class="form-inline" role="form">
            <input class="form-control" data-bind="value: email" />
            <button class="btn btn-default" data-bind="click: search_for_users">Search</button>
        </div>

        <table class="col-md-8 table table-striped">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Modify</th>
                </tr>
            </thead>
            <tbody data-bind="template: { name: 'user_temp', foreach: users }"></tbody>
        </table>
    </div>

    <div data-bind="with: current_user">
        <div data-bind="template: { name: 'user_template', data: $parent.current_user }"></div>   
    </div>    

    <div class="col-xs-6">
        <h3>Create User:</h3>
        <div class="form-group">
            <label for="exampleInputEmail1">Email address</label>
            <input type="email" class="form-control" data-bind="create_email" placeholder="Enter email">
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">Password</label>
            <input type="password" class="form-control" data-bind="create_password" placeholder="Password">
        </div>
        <button class="btn btn-sm btn-primary" data-bind="click: create">Create</button>
    </div>


    <script id="user_temp" type="text/html">
        <tr>
            <td>
                <p data-bind="text: email"></p>
            </td>                       
            <td>
                <button class="btn btn-default btn-sm" data-bind="click: $root.set_user">Edit</button>
            </td>   
            <td>
                <button class="btn btn-default btn-sm" data-bind="click: $root.remove">Destroy</button>
            </td>   
        </tr>   
    </script>

    <%= render 'shared/user_template' %>

    <script type='text/javascript'>//<![CDATA[ 

        function User(data) {
            var self = this;
            self.id = data._id;
            self.email = ko.observable(data.email);
            self.phone = ko.observable(data.phone);
            self.is_admin = ko.observable(data.is_admin);
            self.restaurant = ko.observable();

            if(data.owns_restaurants){
              self.restaurant(new Restaurant(data.owns_restaurants));
            }

            self.restaurant_name = ko.observable("");
            self.restaurants = ko.observableArray([]);

            self.search_for_restaurant = function() {
                console.log("Searching!");
                $.getJSON("/app/administration/search_restaurants?restaurant_name=" + self.restaurant_name(), function(data) { 
                    self.restaurants($.map(data, function(item) { return new Restaurant(item) }));
                }).fail( function(d, textStatus, error) {
                    console.error("getJSON failed, status: " + textStatus + ", error: "+error)
                });
            };

            self.set_restaurant = function(resto){
                $.ajax({
                  type: "POST",
                  url: "/app/administration/user_set_restaurant",
                  data: {
                    user_id: self.id,
                    restaurant_id: resto.id,
                  },
                  success: function(data, textStatus, jqXHR){
                        bootbox.alert(data.result);
                        self.restaurant(resto);
                    },
                  dataType: "json"
                });
            }         

            self.save = function(){
                $.ajax({
                  type: "POST",
                  url: "/app/administration/update_user",
                  data: {
                    user_id: self.id,
                    email: self.email(),
                    is_admin: self.is_admin()
                  },
                  success: function(data, textStatus, jqXHR){

                    },
                  dataType: "json"
                });
            }                   

            self.toggle_is_admin = function(){
                self.is_admin(!self.is_admin());
            }
        }

        function Restaurant(data) {
            console.log("New Restaurant: " + data.name);
            var self = this;
            self.name = ko.observable(data.name);
            self.lat = ko.observable(data.lat);
            self.lon = ko.observable(data.lon);
            self.id = data._id;
        }    

        function viewModel() {
            var self = this;
            self.email = ko.observable("");
            self.create_email = ko.observable("");
            self.current_user = ko.observable();
            self.create_password = ko.observable("");
            self.users = ko.observableArray([]);
            self.search_for_users = function() {
                console.log("Searching!");
                $.getJSON("/app/administration/search_users?email=" + self.email(), function(data) {
                    self.users([]); 
                    self.users($.map(data, function(item) { console.log(item); return new User(item) }));
                }).fail( function(d, textStatus, error) {
                    console.error("getJSON failed, status: " + textStatus + ", error: "+error)
                });
            };

            self.set_user = function(user) {
                self.current_user(user);
            };            

            self.create = function(){
                $.ajax({
                  type: "POST",
                  url: "/app/administration/create_user",
                  data: {
                    email: self.create_email(),
                    password: self.create_password(),
                  },
                  success: function(data, textStatus, jqXHR){
                        bootbox.alert(data.result);
                    },
                  dataType: "json"
                });
            }

            self.remove = function(item) {
                bootbox.dialog({
                  message: "Destroy user \"" + item.email() + "\"?",
                  title: "Remove User",
                  buttons: {
                    success: {
                      label: "No",
                      className: "btn-primary pull-left col-xs-3",
                      callback: function() {

                      }
                    },
                    danger: {
                      label: "Yes",
                      className: "btn-danger col-xs-3 pull-right",
                      callback: function() {
                        $.ajax({
                          type: "POST",
                          url: "/app/administration/destroy_user",
                          data: {
                            user_id: item.id,
                          },
                          success: function(data, textStatus, jqXHR){
                                self.users.remove(item);
                            },
                          dataType: "json"
                        });                        
                      }
                    },
                  }
                });        
            } 


        };

        ko.applyBindings(new viewModel());


    //]]>  
    </script>
</div>