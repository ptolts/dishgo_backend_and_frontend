    <script type='text/javascript'>//<![CDATA[ 

        var design_data = <%= raw(@designs.to_json) %>;
        var font_data = <%= raw(@fonts.to_json) %>;
        var restaurant_id = "<%= current_user.owns_restaurants.id %>";
        var current_design_id = "<%= @design_id %>";
        var current_font_id = "<%= @font_id %>";     
        var resto_data = <%= raw(current_user.owns_restaurants.as_document.to_json) %>;


        ko.bindingHandlers.logger = {
            update: function(element, valueAccessor, allBindings) {
                //store a counter with this element
                var count = ko.utils.domData.get(element, "_ko_logger") || 0

                ko.utils.domData.set(element, "_ko_logger", ++count);

                if (window.console && console.log) {
                    console.log(count, element);
                }
            }
        };

        ko.bindingHandlers.iFrame = {
            update: function (element, valueAccessor) {
                console.log("DEBUG: iFrame firing on: " + element);
                var value = valueAccessor();

                var html = "<!DOCTYPE html>\n<html>\n<head>\nFONT_LINK_DATA\n<style>html{ overflow: hidden; }</style></head>\n<body>\n<style>\nCSS_DATA_HERE\n</style>\n<h1>Example Header</h1>\n<h3>Sub Header</h3>\n<p>Paragraph style example. This is how the main text would always look throughout your site.</p>\n</body>\n</html>";

                var html_result = html.replace("FONT_LINK_DATA",value.link_data());
                html_result = html_result.replace("CSS_DATA_HERE",value.css());

                $(element).contents().find("html").html(html_result);
            }
        };              

        function viewModel() {
            var self = this;
            self.designs = ko.observableArray([]);
            self.fonts = ko.observableArray([]);
            self.current_design = ko.observable();
            self.current_font = ko.observable();
            self.languages = ko.observableArray(['en','fr']);
            self.restaurant = ko.observable(new Restaurant(resto_data));
            self.lang = ko.observable('en');

		    self.languages_full = {
		      'en'  : 'English',
		      'fr'  : 'Fran√ßais',
		    }  

            self.layout_tr = ko.observable({
                'en':'Layout',
                'fr':'Disposition'
            }); 

            self.pages_tr = ko.observable({
                'en':'Pages',
                'fr':'Pages'
            });                          

		    self.getFullLangName = function(l){ 
		      return ko.observable(self.languages_full[l]) 
		    }   

		    self.computeImage = function(image){
		        console.log(image);
		        if(self.current_design() != null && self.current_design().imgs[image]){
		            return "url(" + self.current_design().imgs[image]() + ")";
		        } else {
		            return "";
		        }
		    };  		                    

            _.each(design_data, function(item) { 
              var des = new Design(item);
              if(des.id() == current_design_id){
                self.current_design(des);
              }
              self.designs.push(des);
            });  

            _.each(font_data, function(item) { 
              var font = new Font(item);
              if(font.id() == self.restaurant().font_id){
                self.current_font(font);
              }
              self.fonts.push(font);
            });                                         

            self.setDesign = function(item){
                self.current_design(item);
            }

            self.setFont = function(item){
                self.current_font(item);
            }        

            self.indexOfCurrentPage = function(page) {
               return page.parentPage.children.indexOf(page);
            };

            self.nextPage = function(page) {      
                pager.goTo(page.parentPage.children()[self.indexOfCurrentPage(page) + 1].path());
            };

            self.previousPage = function(page) {      
                pager.goTo(page.parentPage.children()[self.indexOfCurrentPage(page) - 1].path());
            };     

            self.visiblePrevious = function(page) {      
                return ko.computed(function(){ 
                    if (page.parentPage.children()[self.indexOfCurrentPage(page) - 1]){
                        return true;
                    } else {
                        return false;
                    }
                });
            };  

            self.visibleNext = function(page) {      
                return ko.computed(function(){ 
                    if (page.parentPage.children()[self.indexOfCurrentPage(page) + 1]){
                        return true;
                    } else {
                        return false;
                    }
                });
            };                             


            var skip_check = false;
            self.submitDesign = function(){
                skip_check = true;
                $.ajax({
                  type: "POST",
                  url: "/app/website/submit_design",
                  data: {
                    restaurant_id: restaurant_id,
                    font_id: self.current_font().id(),
                    data: ko.toJSON(self.current_design),
                    restaurant_data: ko.toJSON(self.restaurant)
                  },
                    success: function(data, textStatus, jqXHR){
                        console.log(data);
                        // bootbox.alert("Design set! Preview <a href=\"" + data.preview + "\" target=\"_blank\">here</a>"); 
                        window.location.href = "/app";    
                    },
                    error: function(XMLHttpRequest, textStatus, errorThrown) { 
                        console.log("There was an error setting design: " + errorThrown);
                    },
                    dataType: "json"
                });
            }  

            self.original_data = ko.toJSON(self.current_design);
            $(window).on('beforeunload', function () {
                if (self.original_data != ko.toJSON(self.current_design) && !skip_check) {
                    return 'You haven\'t saved your changes.';
                } 
            });                  
        };

        var viewmodel = new viewModel();            

        $(function(){   
            pager.Href.hash = '#!/';
            pager.extendWithPage(viewmodel);
            ko.applyBindings(viewmodel);                    
            pager.start();        
        });


    //]]>  
    </script>    