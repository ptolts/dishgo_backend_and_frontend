<style>

    .thumbnail {
        display: inline-block;
    }

    .file_upload_button {
        position: relative;
        overflow: hidden;
    }

    .file_upload_input {
        position: absolute;
        top: 0;
        right: 0;
        margin: 0;
        opacity: 0;
        -ms-filter: 'alpha(opacity=0)';
        font-size: 50px;
        direction: ltr;
        cursor: pointer;
    }

    .section_header {
        margin-top: 8px;
        margin-bottom: 8px;
        padding-top: 8px;
        padding-bottom: 8px;
        height: 100%;
        display: block;
        border:1px solid #cccccc;
        background:#dddddd;
        border-radius:5px;      
    }

    .title_and_price {
        margin-left: 10px;
        margin-right: 30px;
    }

    .title_and_price .input-group {
        margin-top: 5px;
    }   

    .dish div[class^=col-xs] {
        padding-left: 0px;
        padding-right: 0px;
    }

    .text-middle {
        /*margin: 10px;*/
        width: 100%;
    }

    .section { 
        font-family: Copperplate, "Copperplate Gothic Light", fantasy;
        width: 1000px;
    }
    .dish {
        display: inline-block;
        min-height: 200px;
        margin-bottom: 15px;
        padding: 15px;
        width: 450px;   
        background:#f5f5f5;
        border-radius: 10px 10px 10px 10px;
        /*overflow:hidden;  */
        vertical-align: top;
        border:1px solid #cccccc;
    }

    .dish_name {
        text-align: left;
    }

    .individual_option {
        position: relative;
        display: inline-block;
        /*padding: 10px;*/
        /*margin-bottom: 5px;*/
        width: 100%;    
        /*background:#7E9292;*/
        /*border-radius: 10px 10px 10px 10px;   */
        vertical-align: top;    
    }

    .option {
        display: inline-block;
        margin-top: 10px;
        padding: 10px;  
        width: 100%;    
        background:#d6dfdf;
        border-radius: 10px 10px 10px 10px;
        border:1px solid #cccccc;
        vertical-align: top;    
    }

    .description {
        width: 100%;
        height: 100%;
    }

    .push_down {
        margin-top: 10px;
    }

    .col-centered{
        float: none;
        margin: 0 auto;
        text-align: center;
    }

    .fancy {
        line-height: 0.5;
        text-align: center;
    }
    .fancy span {
        display: inline-block;
        position: relative;  
    }
    .fancy span:before,
    .fancy span:after {
        content: "";
        position: absolute;
        height: 14px;
        border-bottom: 2px solid black;
        /*border-top: 1px solid black;*/
        top: 0;
        width: 300px;
    }
    .fancy span:before {
        right: 100%;
        margin-right: 15px;
    }
    .fancy span:after {
        left: 100%;
        margin-left: 15px;
    }

    input {
        text-align: center;
    }

    .row {
        margin-bottom: 10px;
    }

    .dishCloseButton {
        display:block;
        position:absolute;
        top:-5px;
        right:-5px;
        width:27px;
        height:27px;
        font-size: 24px;
        color: red;
        /*background:url('http://cdn-sg1.pgimgs.com/images/pg/close-button.png') no-repeat center center;*/
    }

    .closeButton {
        display:block;
        position:absolute;
        top:-5px;
        right:-15px;
        width:27px;
        height:27px;
        font-size: 24px;
        color: red;
        /*background:url('http://cdn-sg1.pgimgs.com/images/pg/close-button.png') no-repeat center center;*/
    }   

    </style>

    <div class="container section">

        <div class="row section_header">
            <div class="col-xs-7" style="margin-left: 0px">     
                <button class="btn btn-primary" data-bind="click: saveMenu">Commit Changes</button> 
                <button class="btn btn-danger">Discard Changes</button>                         
            </div>

            <div class="form-inline col-xs-5" style="margin-right: 0px">
                <div class="input-group">
                    <input class="form-control" data-bind="value: newSectionName" />
                    <span class="input-group-btn">
                        <button class="btn btn-info" type="button" data-bind="click: addSection">Add Section</button>
                    </span>
                </div><!-- /input-group -->                                                     
            </div>                      
        </div>  


        <div data-bind="foreach: menu">
            <div class="col-xs-12">


                    <div class="row section_header">
                        <span class="closeButton glyphicon glyphicon-remove-circle" data-bind="click: $parent.remove"></span>
                        <div class="col-xs-7" style="margin-left: 0px">     
                            <div class="input-group">
                                <span class="input-group-addon">Section Title:</span>
                                <input data-bind="value: name" class="col-xs-6 form-control input-group-sm tooltipclass" data-toggle="tooltip" data-placement="bottom" title="Type in this sections title into this box."/>
                            </div>                              
                        </div>

                        <div class="form-inline col-xs-5" style="margin-right: 0px">
                            <div class="input-group">
                                <input class="form-control" data-bind="value: newDishName" />
                                <span class="input-group-btn">
                                    <button class="btn btn-info" type="button" data-bind="click: addDish">Add Dish</button>
                                </span>
                            </div><!-- /input-group -->                                                     
                        </div>                      
                    </div>  
        
                                    
                    <!-- ko foreach: dishes -->
                        <div class="col-xs-12 col-md-6">
                            <div class="dish">
                                <span class="dishCloseButton glyphicon glyphicon-remove-circle" data-bind="click: $parent.remove"></span>
                                <div class="col-xs-12">
                                    <div class="col-xs-7 input-group-sm">
                                        <input data-bind="value: name" class="form-control col-xs-12 dish_name tooltipclass" data-toggle="tooltip" data-placement="top" title="Type the dish name into this box."/> 
                                    </div>
                                    <div class="col-xs-4 col-xs-offset-1">
                                        <div class="input-group input-group-sm" data-bind="visible: !sizes()">
                                            <span class="input-group-addon">$</span>
                                            <input type="text" class="form-control tooltipclass price_filter" data-bind="value: price" data-toggle="tooltip" data-placement="top" title="Type the dish price into this box.">
                                        </div>                                      
                                    </div>
                                </div>
                                <div class="col-xs-12 push_down">
                                    <textarea rows="6" data-bind="value: description" class="description form-control tooltipclass" data-toggle="tooltip" data-placement="top" title="Type the dish description into this box."></textarea>
                                </div>


                                <!-- ko foreach: images -->
                                    <div data-bind="template: { name: 'image', data: $data}"></div>  
                                <!-- /ko -->  

                                <div class="col-xs-12 push_down">
                                    <span class="btn btn-info btn-sm file_upload_button col-xs-8 col-xs-offset-2">
                                        <i class="glyphicon glyphicon-plus"></i>
                                        <span>Add Image</span>
                                        <!-- The file input field used as target for the file upload widget -->
                                        <input data-bind="file_upload" id="fileupload" type="file" name="files[]" multiple="" data-url="http://dev.foodcloud.ca:3000/home/upload_image"  class="file_upload_input">
                                    </span>                                                                                     
                                </div>                                        

                                <div class="col-xs-12 push_down">
                                    <div class="col-centered form-inline control_piece">
                                        <div class="control_piece_center">
                                          <div class="checkbox">
                                            <label>Does this dish have multiple sizes? <input data-bind="checked: sizes" type="checkbox"></label>
                                          </div>
                                        </div>                              
                                    </div>
                                </div>

                                <div data-bind="template: { name: 'size', data: sizes_object }, visible: sizes"></div>

                                <div data-bind="template: { name: templateToUse, foreach: options }"></div>

                                <div class="col-xs-12 text-center push_down">
                                    <button class="btn btn-sm btn-info col-xs-10 col-xs-offset-1" data-bind="click: addOption">Add Option</button>
                                </div>

                            </div>                  
                        </div>

                    <!-- /ko -->        
            </div>              
        </div>
    </div>  

    <!-- TEMPLATES -->
    <script id="size" type="text/html">
        <div class="col-xs-12 text-center" style="margin-bottom: 5px;">
            <div class="option">        
                <div class="col-xs-12" style="text-align: left; font-size: 24px">
                    <span class="label label-primary" data-bind="text: name"></span>      
                </div>      
                <!-- ko foreach: individual_options -->
                    <div class="col-xs-12 push_down">
                        <div class="individual_option">                 
                                <div class="col-xs-6">
                                    <div class="col-xs-10 input-group-sm">
                                        <input data-bind="value: name" class="form-control"/>   
                                    </div>              
                                </div>
                                <div class="col-xs-6">              
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-addon">$</span>
                                        <input type="text" class="form-control price_filter" data-bind="value: price">
                                    </div>  
                                </div>  
                            </div>
                            <!-- ko if: $index() > 1 -->
                                <span class="closeButton glyphicon glyphicon-remove-circle" data-bind="click: $parent.remove"></span>
                            <!-- /ko -->
                    </div> 
                <!-- /ko -->
                <div class="col-xs-12 push_down">
                    <button class="btn btn-sm btn-info col-xs-offset-7" data-bind="click: addSize">Add Size</button>
                </div>
            </div>
        </div> 
    </script>

    <script id="image" type="text/html">
        <div class="col-xs-12 push_down">
            <div class="uploading_image" data-bind="visible: !completed()">
                <div class="col-xs-3">
                    <span class="label label-default" data-bind="text: filename"></span>
                </div>
                <div class="col-xs-9">
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100" data-bind="style: { width: progressValue() + '%'}"></div>
                    </div>    
                </div> 
            </div> 
            <div class="completed_image" data-bind="visible: completed">
                <div class="col-xs-12 text-center">
                    <img class="thumbnail img-rounded" data-bind="attr: {src: url}" />
                </div> 
            </div>  
        </div>
    </script> 

    <script id="default" type="text/html">
        <div class="col-xs-12 text-center" style="margin-top: 10px;">
            <div class="option">
                <span class="closeButton glyphicon glyphicon-remove-circle" data-bind="click: $parent.remove"></span>   
                <div class="col-xs-10 col-xs-offset-1 input-group-sm">
                    <input class="form-control" data-bind="value: name"/>
                </div>                  
                <!-- ko foreach: individual_options -->
                    <div class="col-xs-12 push_down">
                        <div class="individual_option">
                            <div class="col-xs-6 input-group-sm">
                                <input data-bind="value: name" class="form-control"/>
                            </div>
                            <div class="col-xs-5 col-xs-offset-1" data-bind="visible: !$parent.multiple_prices()">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-addon">$</span>
                                    <input type="text" class="form-control price_filter" data-bind="value: price">
                                </div>                                          
                            </div>
                            <div class="col-xs-5 col-xs-offset-1" data-bind="visible: $parent.multiple_prices">             
                                <!-- ko foreach: size_prices -->
                                    <div class="col-xs-12" data-bind="css: {'push_down': $index() > 0}">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-addon" data-bind="text: name">@</span>
                                            <input type="text" class="form-control price_filter" data-bind="value: price">
                                        </div>                                  
                                    </div>
                                <!-- /ko -->
                            </div>                          
                            <!-- ko if: $index() > 1 -->
                                <span class="closeButton glyphicon glyphicon-remove-circle" data-bind="click: $parent.remove"></span>
                            <!-- /ko -->
                        </div>
                    </div> 
                <!-- /ko -->

                <div class="col-xs-12 push_down">
                    <div class="col-centered form-inline control_piece">
                        <div class="control_piece_center">
                          <div class="checkbox">
                            <label>Show advanced options? <input data-bind="checked: advanced" type="checkbox"></label>
                          </div>
                        </div>                              
                    </div>
                </div>              

                <div data-bind="visible: advanced">
                    <div class="col-xs-12 push_down">
                        <div class="col-xs-6" style="text-align: right">
                            <p>Minimum selection:</p>
                        </div>
                        <div class="col-xs-3 col-xs-offset-2">
                            <select class="form-control" data-bind="value: min_selections">
                                <!-- ko foreach: individual_options -->
                                    <!-- ko ifnot: ($index() + 1) == $parent.individual_options().length -->
                                    <option data-bind="text: ($index() + 1)" selected="selected"></option>
                                    <!-- /ko -->
                                    <!-- ko if: ($index() + 1) == $parent.individual_options().length -->
                                    <option data-bind="text: ($index() + 1)"></option>
                                    <!-- /ko -->                            
                                <!-- /ko -->
                            </select>   
                        </div>  
                    </div>      

                    <div class="col-xs-12 push_down">
                        <div class="col-xs-6" style="text-align: right">
                            <p>Max selection:</p>
                        </div>
                        <div class="col-xs-3 col-xs-offset-2">
                            <select class="form-control" data-bind="value: max_selections">
                                <!-- ko foreach: individual_options -->
                                    <!-- ko if: ($index() + 1) == $parent.individual_options().length -->
                                    <option data-bind="text: ($index() + 1)" selected="selected"></option>
                                    <!-- /ko -->
                                    <!-- ko ifnot: ($index() + 1) == $parent.individual_options().length -->
                                    <option data-bind="text: ($index() + 1)"></option>
                                    <!-- /ko -->                            
                                <!-- /ko -->
                            </select>   
                        </div>  
                    </div>
                </div>                              

                <div class="col-xs-12 push_down">
                    <button class="btn btn-sm btn-info col-xs-10 col-xs-offset-1" data-bind="click: addOption">Add Suboption</button>
                </div>              
            </div>
        </div> 
    </script>   

</body>

<script type='text/javascript'>//<![CDATA[ 

var restaurant_id = "<%= params[:restaurant_id]%>";

function updateFilters() {
    // Only allow prices in any price field.
    $(".price_filter").removeAttr("keypress");
    $('.price_filter').keypress(function(eve) {
       if (( eve.which != 46 || $(this).val().indexOf('.') != -1 ) && ( eve.which <  48 || eve.which > 57 ) || ( $(this).val().indexOf('.') == 0)){
           eve.preventDefault();
       }
    });         
}   

function Section(data) {

    var self = this;

    if(data._id){
        self.id = data._id;
    } else {
        self.id = null;
    }
    self.name = ko.observable(data.name);
    // self.subsections = ko.observableArray($.map(data.subsection, function(item) { return new Subsection(item) }));

    self.dishes = ko.observableArray([]);
    if(data.dishes){
        self.dishes = ko.observableArray($.map(data.dishes, function(item) { return new Dish(item) }));     
    }

    if(data.dom_id){
        self.dom_id = data.dom_id;
    } else {
        self.dom_id = "";
    } 

    self.editing_name = ko.observable(false);
    // Behaviors
    self.edit_name = function() { 
        console.log("Section Editing! " + self.editing_name());
        self.editing_name(true);
        console.log("Section Editing! " + self.editing_name());     
    }; 

    self.remove = function(item) {
        bootbox.dialog({
          message: "Are you sure you want to remove the dish titled \"" + item.name() + "\"?",
          title: "Remove Dish",
          buttons: {
            success: {
              label: "No",
              className: "btn-primary pull-left col-xs-3",
              callback: function() {

              }
            },
            danger: {
              label: "Yes",
              className: "btn-danger col-xs-3 pull-right",
              callback: function() {
                self.dishes.remove(item);
              }
            },
          }
        });        
    }

    // Operations
    self.newDishName = ko.observable();
    self.addDish = function() {
        console.log("Adding Dish");
        self.dishes.push(new Dish({name:self.newDishName(),}));
        updateFilters();
    }   

}

function Image(data) {
    var self = this;
    self.progressValue = ko.observable(1);
    self.filename = ko.observable("");
    self.id = ko.observable("");
    self.url = ko.observable("/loader.gif");
    self.completed = ko.observable(false);

    if(data){
        if(data.local_file){
            self.id = data._id;
            self.url = ko.observable(data.local_file);
            self.completed(true);
        }  
    } 
}

ko.bindingHandlers.file_upload = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var self = this;
        self.imageModel;
        $(element).fileupload({
            formData: {restaurant_id: restaurant_id},
            dataType: 'json',
            progressInterval: 50,
            send: function (e, data) {
                $.each(data.files, function (index, file) {
                    self.imageModel = viewModel.addImage();
                    console.log(self.imageModel);
                    self.imageModel.filename(file.name);
                });                
            },
            done: function (e, data) {
                var file = data.result.files[0];
                self.imageModel.url(file.thumbnailUrl);
                self.imageModel.completed(true);
                self.imageModel.id(file.image_id);
            },
            progressall: function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
                self.imageModel.progressValue(progress);
            }        
        });
    }
};

function Dish(data) {
    var self = this;
    self.name = ko.observable(data.name);  
    self.description = ko.observable(data.description);
    self.price = ko.observable(data.price);
    self.images = ko.observableArray([]);

    if(data._id){
        self.id = data._id;
    } else {
        self.id = null;
    }

    if(data.sizes){
        self.sizes = ko.observable(true);
        console.log("data size:");
        console.log(data.sizes);
        self.sizes_object = ko.observable(new Option(data.sizes,self));
    } else {
        self.sizes = ko.observable(false);
        console.log("no data sizes");
        self.sizes_object = ko.observable(new Option({type:"size",name:"Sizes",individual_options:[{name:"Small",price:'0.0'},{name:"Large",price:'0.0'}]},self));
    }

    self.options = ko.observableArray([]);
    if(data.options){
        self.options = ko.observableArray($.map(data.options, function(item) { return new Option(item,self) }));        
    }

    if(data.image) {
        self.images = ko.observableArray($.map(data.image, function(item) { return new Image(item) }));                
    }

    self.editing = ko.observable(false);
    // Behaviors
    self.edit = function() { 
        console.log("Editing "+self.name()+"!");
        self.editing(true) 
    };

    self.editing_name = ko.observable(false);
    // Behaviors
    self.edit_name = function() { 
        console.log("Editing_name!");
        self.editing_name(true) 
    };

    // Which option template to use.
    self.templateToUse = function(item) {
        if(item.type == "size"){
            return 'size';
        } else {
            return 'default';
        }
    }

    self.addOption = function() { 
        console.log("Adding option!");
        self.options.push(new Option({type:"generic",name:"New Option",individual_options:[{name:"First Option",price:'0.0'},{name:"Second Option",price:'0.0'}]},self));
        updateFilters();
    };

    self.addImage = function(item) { 
        var new_image = new Image(item);
        self.images.push(new_image);
        return new_image;
    };    

    // Which option template to use.
    self.remove = function(item) {
        bootbox.dialog({
          message: "Are you sure you want to remove the option titled \"" + item.name() + "\"?",
          title: "Remove Option",
          buttons: {
            success: {
              label: "No",
              className: "btn-primary pull-left col-xs-3",
              callback: function() {

              }
            },
            danger: {
              label: "Yes",
              className: "btn-danger col-xs-3 pull-right",
              callback: function() {
                self.options.remove(item);
              }
            },
          }
        });
    }

    self.triggerImageSelect = function(index){
        $('#image_upload' + index).click();
    }

}

Option.prototype.toJSON = function() {
    var copy = ko.toJS(this); //easy way to get a clean copy
    delete copy.dish; //remove an extra property
    delete copy.multiple_prices; 
    delete copy.sizes_object_names; 
    return copy; //return the copy to be serialized
};
function Option(data,dish) {

    var self = this;
    self.name = ko.observable(data.name);
    self.dish = dish;
    self.advanced = ko.observable(false);   

    if(data._id){
        self.id = data._id;
    } else {
        self.id = null;
    }

    self.type = data.type; 
    self.max_selections = ko.observable();
    self.min_selections = ko.observable();  
    self.multiple_prices = self.dish.sizes;

    if(data.type != "size"){
        // This is the list of size options if this happens to be the size option version of this model.
        self.sizes_object_names = dish.sizes_object().individual_options;
    }

    self.individual_options = ko.observableArray([]);
    if(data.individual_options){
        self.individual_options = ko.observableArray($.map(data.individual_options, function(item) { return new IndividualOption(item,self)})); 
    }

    self.editing_name = ko.observable(false);
    self.edit_name = function() { 
        self.editing_name(true);    
    };  

    // Which option template to use.
    self.addSize = function() {
        self.individual_options.push(new IndividualOption({name:"New Size",price:'0.0'},self));
        updateFilters();        
    }

    // Which option template to use.
    self.addOption = function() {
        self.individual_options.push(new IndividualOption({name:"New Option",price:'0.0'},self));
        updateFilters();
    }   

    // Which option template to use.
    self.remove = function(item) {
        bootbox.dialog({
          message: "Are you sure you want to remove the size option titled \"" + item.name() + "\"?",
          title: "Remove Size Option",
          buttons: {
            success: {
              label: "No",
              className: "btn-primary pull-left col-xs-3",
              callback: function() {

              }
            },
            danger: {
              label: "Yes",
              className: "btn-danger col-xs-3 pull-right",
              callback: function() {
                item.remove_size_options();     
                self.individual_options.remove(item);
              }
            },
          }
        });        
    }

    self.toggleAdvanced = function() {
        self.advanced(!self.advanced());
    }

}

function SizePrices(data) {
    var self = this;
    self.name = data.name;  
    self.ind_opt = data.ind_opt;
    self.size_ind_opt = data.size_ind_opt;
    self.size_ind_opt_id = data.size_ind_opt._id;
    self.price = ko.observable(data.price);
    self.e_price = ko.observable(false);  

    self.edit_price_size = function() { 
        self.e_price(true);     
    };  

    self.remove_self = function(){
        bootbox.dialog({
          message: "Are you sure you want to remove the suboption titled \"" + item.name() + "\"?",
          title: "Remove Suboption",
          buttons: {
            success: {
              label: "No",
              className: "btn-primary pull-left col-xs-3",
              callback: function() {

              }
            },
            danger: {
              label: "Yes",
              className: "btn-danger col-xs-3 pull-right",
              callback: function() {
                self.ind_opt.remove_size_option(self);
              }
            },
          }
        });        
    }    
}
SizePrices.prototype.toJSON = function() {
    var copy = ko.toJS(this); //easy way to get a clean copy
    delete copy.ind_opt; //remove an extra property
    delete copy.size_ind_opt;    
    return copy; //return the copy to be serialized
};


IndividualOption.prototype.toJSON = function() {
    var copy = ko.toJS(this); //easy way to get a clean copy
    delete copy.option; //remove an extra property
    delete copy.dish; 
    delete copy.type;  
    delete copy.size_prices_to_remove; 
    return copy; //return the copy to be serialized
};
function IndividualOption(data,option) {

    var self = this;
    if(data._id){
        self.id = data._id;
    } else {
        self.id = null;
    }
    self.option = option;
    self.name = ko.observable(data.name);
    self.price = ko.observable(data.price);     
    self.type = option.type;
    self.dish = option.dish;
    self.destroy_it = false;
    self.size_prices = ko.observableArray([]); 

    if(data.size_prices && self.type != 'size'){
        _.each(data.size_prices,function(e){
            if(_.find(self.option.sizes_object_names(),function(i){return i.name() == e.name})){
                var found_object = _.find(self.option.sizes_object_names(),function(i){ return i.name() == e.name});
                var new_size_prices = new SizePrices({name:found_object.name,price:e.price,ind_opt:self,size_ind_opt:found_object});
                self.size_prices.push(new_size_prices);
            } 
        });        
    }

    // if this is a size version of Options, then we need to remove all SizePrices from all other options. They will be pushed to this array.
    self.size_prices_to_remove = new Array();

    if(self.type != "size"){

        // self.option.size_object is the size version of the options model. It lists the IndividualOptions of each size.
        _.each(self.option.sizes_object_names(),function(e){
            if(_.find(self.size_prices(),function(i){ return i.size_ind_opt == e})===undefined){
                self.new_size_prices = new SizePrices({name:e.name,price:0.0,ind_opt:self,size_ind_opt:e});
                self.size_prices.push(self.new_size_prices);
                e.size_prices_to_remove.push(self.new_size_prices);
            } 
        });

        self.option.sizes_object_names.subscribe(function (newValue) {
                _.each(self.option.sizes_object_names(),function(e){
                    if(_.find(self.size_prices(),function(i){ return i.size_ind_opt == e}) === undefined){
                        self.new_size_prices = new SizePrices({name:e.name,price:0.0,ind_opt:self,size_ind_opt:e});
                        self.size_prices.push(self.new_size_prices);
                        e.size_prices_to_remove.push(self.new_size_prices);
                    } 
                });
        }, self);

    }

    self.remove_size_option = function(item) {      
        self.size_prices.remove(item);      
    };  

    self.remove_size_options = function(){
        _.each(self.size_prices_to_remove,function(e){e.remove_self()}); 
    };

    self.editing_name = ko.observable(false);
    self.edit_name = function() { 
        self.editing_name(true);    
    }; 

    self.editing_price = ko.observable(false);
    self.edit_price = function() { 
        self.editing_price(true);   
    };     
}

function MenuViewModel() {
    // Data
    var self = this;
    self.menu = ko.observableArray([]);
    self.newDomCounter = 0;
    $.getJSON("http://dev.foodcloud.ca:3000/api/v1/restaurants/menu?id=" + restaurant_id, function(data) { 
        self.menu($.map(data.menu, function(item) { return new Section(item) }));
        $(".tooltipclass").tooltip({delay: { show: 500, hide: 100 }});
        updateFilters();
    }).fail( function(d, textStatus, error) {
        console.error("getJSON failed, status: " + textStatus + ", error: "+error)
    });

    // Operations
    self.newSectionName = ko.observable();
    self.addSection = function() {
        console.log("Adding Section");
        self.newDomCounter++;
        self.menu.push(new Section({name:self.newSectionName(),subsection:[],dom_id:self.newDomCounter}));
        var target = "#"+self.newDomCounter;
        $('html').animate({
            scrollTop: $(target).offset().top
        }, 500);
    } 


    self.saveMenu = function() {
        bootbox.dialog({
          message: "Are you sure you want to commit your changes to the menu? The changes will take effect immediately.",
          title: "Commit Changes",
          buttons: {
            success: {
              label: "No, continue editing.",
              className: "btn-primary pull-left col-xs-5",
              callback: function() {

              }
            },
            danger: {
              label: "Yes, save changes.",
              className: "btn-danger col-xs-5 pull-right",
              callback: function() {
                $.ajax({
                  type: "POST",
                  url: "http://dev.foodcloud.ca:3000/home/update_menu",
                  data: {
                    restaurant_id: restaurant_id,
                    menu: ko.toJSON(self.menu)
                  },
                  success: function(data, textStatus, jqXHR){
                        self.menu($.map(data.menu, function(item) { return new Section(item) }));
                        $(".tooltipclass").tooltip({delay: { show: 500, hide: 100 }});
                        updateFilters();
                    },
                  dataType: "json"
                }); 
              }
            },
          }
        });          
    }  

    self.remove = function(item) {
        bootbox.dialog({
          message: "Are you sure you want to remove the section titled \"" + item.name() + "\"?",
          title: "Remove Section",
          buttons: {
            success: {
              label: "No",
              className: "btn-primary pull-left col-xs-3",
              callback: function() {

              }
            },
            danger: {
              label: "Yes",
              className: "btn-danger col-xs-3 pull-right",
              callback: function() {
                self.menu.remove(item);
              }
            },
          }
        });        
    } 
        
};

ko.applyBindings(new MenuViewModel());

//]]>  

</script>